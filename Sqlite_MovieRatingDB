#Database overview & schema:

Movie ( mID, title, year, director )
English: There is a movie with ID number mID, a title, a release year, and a director.

Reviewer ( rID, name )
English: The reviewer with ID number rID has a certain name.

Rating ( rID, mID, stars, ratingDate )
English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate.

*SQL database source : EDX, StanfordOnline: SOE.YDB-SQL0001 / Databases: Relational Databases and SQL, openly available. 
*Database can be downloaded from https://s3-us-west-2.amazonaws.com/prod-c2g/db/Winter2013/files/rating.sql
* This Query is composed based on sqlite rules


Q1
Find the titles of all movies directed by Steven Spielberg.

SELECT title
FROM Movie
WHERE director = 'Steven Spielberg';

Q2
Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order.
SELECT DISTINCT Movie.year
FROM Movie, Rating
WHERE Movie.mID = Rating.mID AND (Rating.stars = 4 OR Rating.stars = 5)
ORDER BY Movie.year;

Q3
Find the titles of all movies that have no ratings.

SELECT DISTINCT Movie.title
FROM Movie
WHERE Movie.mID NOT IN (SELECT mID FROM Rating);

Q4
Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date.

SELECT name
FROM Reviewer, Rating
WHERE Reviewer.rID = Rating.rID AND Rating.ratingDate IS NULL;

Q5
Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars.
SELECT Reviewer.name, Movie.title, stars, ratingDate
FROM Movie, Reviewer, Rating
WHERE Movie.mID = Rating.mID AND Reviewer.rID = Rating.rID
ORDER BY name, title, stars;

Q6
For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie.

SELECT name, title
FROM Movie
INNER JOIN Rating R1 ON Movie.mID = R1.mID
INNER JOIN Rating R2 ON R1.rID = R2.rID
INNER JOIN Reviewer ON R2.rID = Reviewer.rID
WHERE R1.mID = R2.mID AND R1.ratingDate<R2.ratingDate AND R1.stars < R2.stars;


Q7
For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title.

SELECT title, MAX(stars) AS highest_rating
FROM Movie
INNER JOIN Rating ON Movie.mID = Rating.mID
GROUP BY Movie.mID
ORDER BY title;

Q8
For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title.

SELECT title, MAX(stars) - MIN(stars) AS rating_spread
FROM Movie, Rating
WHERE Movie.mID = Rating.mID
GROUP BY Movie.mID
ORDER BY rating_spread DESC, title;

Q9
Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.)

SELECT AVG(pre80avgstars.stars) - AVG(post80avgstars.stars)
FROM (SELECT AVG(stars) AS stars
	  FROM Movie
	  INNER JOIN Rating ON Movie.mID = Rating.mID
	  WHERE year >1980
	  GROUP BY Movie.mID) AS post80avgstars,
	  
	 (SELECT AVG(stars) AS stars 
	  FROM Movie
	  INNER JOIN Rating ON Movie.mID = Rating.mID
	  WHERE year < 1980
	  GROUP BY Movie.mID) AS pre80avgstars;
	  
Q10
Find the names of all reviewers who rated Gone with the Wind.

SELECT DISTINCT name
FROM Reviewer, Rating, Movie
WHERE Reviewer.rID = Rating.rID AND Movie.mID = Rating.mID AND Movie.title = 'Gone with the Wind';

Q1
Find the names of all reviewers who rated Gone with the Wind.
SELECT DISTINCT name
FROM Reviewer, Rating, Movie
WHERE Reviewer.rID = Rating.rID AND Movie.mID = Rating.mID AND Movie.title = 'Gone with the Wind';

Q2
For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.
SELECT name, title, stars
FROM Movie
LEFT JOIN Rating USING (mID)
LEFT JOIN Reviewer USING (rID)
WHERE director = name;

Q3
Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".)

SELECT name
FROM Reviewer
UNION
SELECT title
FROM Movie
ORDER BY name, title;

Q4
Find the titles of all movies not reviewed by Chris Jackson.

SELECT DISTINCT title
FROM Movie
WHERE title NOT IN (SELECT DISTINCT title
					FROM Movie, Rating, Reviewer
					WHERE Movie.mID = Rating.mID AND Rating.rID = Reviewer.rID AND Reviewer.name = 'Chris Jackson');
					
Q5
For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order.

SELECT DISTINCT Reviewer1.name, Reviewer2.name
FROM Reviewer AS Reviewer1, Reviewer AS Reviewer2, Rating AS Rating1, Rating AS Rating2
WHERE Reviewer1.rID = Rating1.rID AND Reviewer2.rID = Rating2.rID AND Rating1.mID = Rating2.mID AND  Reviewer1.name < Reviewer2.name
ORDER BY Reviewer1.name, Reviewer2.name;

Q6
For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.

SELECT name, title, stars
FROM Rating
LEFT JOIN Movie ON Movie.mID = Rating.mID
LEFT JOIN Reviewer on Reviewer.rID = Rating.rID
WHERE stars = (SELECT MIN(stars)
			   FROM Rating);
			   
			   
Q7
List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order.

SELECT Movie.title, AVG(Rating.stars) AS AVG_stars
FROM Movie, Rating
WHERE Movie.mID = Rating.mID
GROUP BY Movie.title

ORDER BY AVG_stars DESC, title;

Q8
Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.)

SELECT name
FROM Rating
LEFT JOIN Reviewer USING(rID)
GROUP BY rID
HAVING COUNT(*)>2;

Q9
Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.)
SELECT M1.title, director
FROM Movie M1
INNER JOIN Movie M2 USING(director)
GROUP BY M1.mId
HAVING COUNT(*) > 1
ORDER BY director, M1.title;

Q10
Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.)

SELECT title, MAX(AVG_rating)
FROM Rating
LEFT JOIN 
(SELECT mID, AVG(stars) AS AVG_rating
FROM Rating
LEFT JOIN Movie USING(mID)
GROUP BY mID) USING (mID)
LEFT JOIN Movie USING (mID);

Q11
Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.)

SELECT title, AVG(stars) as AVG
FROM Rating Rating1
LEFT JOIN Movie USING(mID)
GROUP BY mID
Having AVG = (SELECT AVG(stars) AS AVG
			   FROM Rating Rating2
			   GROUP BY mID
			   ORDER BY AVG
			   LIMIT 1);
			   

Q12
For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.

SELECT DISTINCT director, title, MAX(stars)
FROM Rating, Movie
WHERE Rating.mID = Movie.mID
GROUP BY director
HAVING director IS NOT NULL;
