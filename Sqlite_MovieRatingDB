#Database overview & schema:

Movie ( mID, title, year, director )
English: There is a movie with ID number mID, a title, a release year, and a director.

Reviewer ( rID, name )
English: The reviewer with ID number rID has a certain name.

Rating ( rID, mID, stars, ratingDate )
English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate.

*SQL database source : EDX, StanfordOnline: SOE.YDB-SQL0001 / Databases: Relational Databases and SQL, openly available. 
*Database can be downloaded from https://s3-us-west-2.amazonaws.com/prod-c2g/db/Winter2013/files/rating.sql
* This Query is composed based on sqlite rules


Q1
Find the titles of all movies directed by Steven Spielberg.

SELECT title
FROM Movie
WHERE director = 'Steven Spielberg';

Q2
Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order.
SELECT DISTINCT Movie.year
FROM Movie, Rating
WHERE Movie.mID = Rating.mID AND (Rating.stars = 4 OR Rating.stars = 5)
ORDER BY Movie.year;

Q3
Find the titles of all movies that have no ratings.

SELECT DISTINCT Movie.title
FROM Movie
WHERE Movie.mID NOT IN (SELECT mID FROM Rating);

Q4
Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date.

SELECT name
FROM Reviewer, Rating
WHERE Reviewer.rID = Rating.rID AND Rating.ratingDate IS NULL;

Q5
Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars.
SELECT Reviewer.name, Movie.title, stars, ratingDate
FROM Movie, Reviewer, Rating
WHERE Movie.mID = Rating.mID AND Reviewer.rID = Rating.rID
ORDER BY name, title, stars;

Q6
For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie.

SELECT name, title
FROM Movie
INNER JOIN Rating R1 ON Movie.mID = R1.mID
INNER JOIN Rating R2 ON R1.rID = R2.rID
INNER JOIN Reviewer ON R2.rID = Reviewer.rID
WHERE R1.mID = R2.mID AND R1.ratingDate<R2.ratingDate AND R1.stars < R2.stars;


Q7
For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title.

SELECT title, MAX(stars) AS highest_rating
FROM Movie
INNER JOIN Rating ON Movie.mID = Rating.mID
GROUP BY Movie.mID
ORDER BY title;

Q8
For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title.

SELECT title, MAX(stars) - MIN(stars) AS rating_spread
FROM Movie, Rating
WHERE Movie.mID = Rating.mID
GROUP BY Movie.mID
ORDER BY rating_spread DESC, title;

Q9
Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.)

SELECT AVG(pre80avgstars.stars) - AVG(post80avgstars.stars)
FROM (SELECT AVG(stars) AS stars
	  FROM Movie
	  INNER JOIN Rating ON Movie.mID = Rating.mID
	  WHERE year >1980
	  GROUP BY Movie.mID) AS post80avgstars,
	  
	 (SELECT AVG(stars) AS stars 
	  FROM Movie
	  INNER JOIN Rating ON Movie.mID = Rating.mID
	  WHERE year < 1980
	  GROUP BY Movie.mID) AS pre80avgstars;
